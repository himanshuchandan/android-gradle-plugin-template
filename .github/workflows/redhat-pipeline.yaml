name: Android APK Build RedHat

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Red Hat registry
      - name: Login to Red Hat Registry
        run: |
          echo "${{ secrets.REDHAT_REGISTRY_PASSWORD }}" | docker login registry.redhat.io \
            -u "${{ secrets.REDHAT_REGISTRY_USERNAME }}" --password-stdin

      # Build Docker image (from registry.redhat.io)
      - name: Build Android Build Image
        run: |
          docker build -t android-builder .

      # Run Gradle build inside container
      - name: Build APK
        run: |
          docker run --rm \
            -v $HOME/.gradle:/root/.gradle \
            -v ${{ github.workspace }}:/app \
            -w /app \
            android-builder gradle assembleRelease 

      # Upload APK artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: '**/build/outputs/apk/release/*.apk'

      # Sign APK step, if not signing apk in the gradle build itself
      #- name: Sign APK
      #  run: |
      #    # Find unsigned APK
      #    APK=$(find . -name "*-release-unsigned.apk" | head -n 1)

      #    # Align APK
      #    zipalign -v -p 4 "$APK" app-release-aligned.apk

      #    # Sign APK
      #    apksigner sign \
      #      --ks my-release-key.jks \
      #      --ks-key-alias ${{ secrets.KEY_ALIAS }} \
      #      --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
      #      --key-pass pass:${{ secrets.KEY_PASSWORD }} \
      #      --out app-release-signed.apk app-release-aligned.apk

      #    # Verify
      #    apksigner verify app-release-signed.apk

      # Upload signed APK
      #- name: Upload Signed APK
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: signed-android-apk
      #    path: app-release-signed.apk    
